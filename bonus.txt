Server.java
  - Translated javadoc to english
  - Translated server messages to english
  - Implemented Multithreading:
    - Only keeping the run() method in the Server class and putting the rest into a new ClientHandler.java class
    - The run() method accepts connections from clients and passes them to ClientHandler objects that implement Runnable.
      These objects are run in independent threads.
  - Made the server "static" by removing its constructor and passing the server port directly to the run() method.
    Done because the server launcher will never launch more than one server.
  - Added error handling

ServerLauncher.java
  - Modified server startup message
  - When the server class was made "static", the ServerLauncher was modified to simply do Server.run(PORT) to start a server
  - Made the server port private as it is independently modified from the client port

ClientHandler.java
  - Modified server messages and the way it sends information to the client
  - run() continuously listens to the client without disconnections until the server receives a DISCONNECT commands
  - Added error handling
  - The now server accepts a DISCONNECT command to cleanly disconnect from a client

Course.java
  - Uniformized code by translating it to english (variables, toString() method return, etc)

RegistrationForm.java
  - Uniformized code by translating it to english (variables, toString() method return, etc)
  - A Student class was created, and the form constructor was modified to only require a Student and a Course object:
    - Accordingly, the toString() method was modified to return the Student and Course objects which both have a toString() method
    - The setters were only kept for the student and course parameters passed to the RegistrationForm
    - The getters were all kept. For example, getName() used to return this.name, whereas it now returns this.student.getName()

Student.java
  - The Student class was created to simplify and make clearer some procedures.
